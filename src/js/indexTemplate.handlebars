// eslint-disable-next-line no-unused-vars
import { parameterBuilder, fetchHelper, eventSourceHelper } from 'rest-api-support';

/**
 *
 * @export
 * @class {{{jsIdentifier apiClassName}}}
 */
export default class {{{apiClassName}}} {
  constructor(configOrGenerator) {
    let config = configOrGenerator;
    if (typeof configOrGenerator === 'function') {
      config = configOrGenerator({{{apiClassName}}});
    }
    const {
      baseUrl = '',
      fetch,
      EventSource,
      requestInterceptor,
      responseInterceptor,
    } = config || {}
    Object.assign(this, { baseUrl, fetch, requestInterceptor, responseInterceptor, EventSource });
  }
{{#each methods}}

  /**
   * {{#if description.length}}{{{description}}}{{else}}{{name}}{{/if}}
   *
  {{#each params}}
   * @parameter { {{{type}}} } {{{name}}}: {{{description}}}
  {{/each}}
   */
  {{{name}}}({
{{#each params}}
    {{{name}}},
{{/each}}
  }, fetchOptions) {
    // Build parameters, run request interceptors, fetch, and then run response interceptors
    // eslint-disable-next-line prefer-rest-params
    const source = { method: '{{{name}}}', client: '{{{apiClassName}}}', arguments: arguments[0] };
    const fetchArgs = parameterBuilder('{{{capMethod}}}', this.baseUrl, '{{{path}}}')
{{#each params}}      .{{{in}}}('{{{serverName}}}', {{{name}}}{{#if format}}, { {{#if format}}
        format: '{{format}}',
      {{/if}} }{{#if @last}}){{/if}}{{/if}}){{#if @last}}
      .build();{{/if}}
{{/each}}{{#if streaming}}
    return eventSourceHelper(this, fetchArgs, fetchOptions, source);
{{else}}
    return fetchHelper(this, fetchArgs, fetchOptions, source);
{{/if}}
  }
{{/each}}
}
