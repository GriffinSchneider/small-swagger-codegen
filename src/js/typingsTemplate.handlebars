// tslint:disable
interface {{{apiClassName}}}Promise<T> extends Promise<T>{
  abort();
  /**
   * Expect certain status codes and accept the promise rather than
   * throwing
   */
  expect(...statusCodes) : {{{apiClassName}}}Promise<T>;
}

interface {{{apiClassName}}}ErrorResponse {

}

export interface {{{apiClassName}}}Configuration {
  fetch: (url: string, init?: any) => Promise<Response>;

  requestInterceptor: () => void;

  responseInterceptor: () => void;
}

{{#each objectModels}}
{{> modelClassTemplate}}

{{/each}}

export default interface {{{apiClassName}}} {
{{#each methods}}
  /*
   * {{{description}}}
   *
  {{#each params}}
   * @parameter ${ {{{type}}} } {{{name}}}: {{{description}}}
  {{/each}}
   */
  {{{name}}}({
  {{#each params}}
      {{{name}}}: {{{type}}}{{#unless required}}? = nil{{/unless}},
  {{/each}}
  }) : {{{../apiClassName}}}Promise<{{{response.type}}} | {{{../apiClassName}}}ErrorResponse | null>;
{{/each}}
}
