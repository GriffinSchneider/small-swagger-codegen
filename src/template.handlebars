import Foundation
import SwaggerClientSupport

open class {{{apiClassName}}}Class: SwaggerApi {
{{#each methods}}
    {{~#maybeComment description}}
    {{{description}}}
    {{/maybeComment}}
    {{#each params}}
    {{~#maybeComment description}}
    - parameter {{{name}}}: {{{description}}}
    {{/maybeComment}}
    {{/each}}
    open func {{{name}}}(
    {{#each params}}
        {{{name}}}: {{{type}}}{{#unless required}}? = nil{{/unless}},
    {{/each}}
        timeout: TimeInterval? = nil,
        completion: @escaping ({{{response.type}}}?, ErrorResponse?) -> Void
    ) {
        self.request(method: .{{{method}}}, path: "{{{path}}}", timeout: timeout, params: [
        {{#each params}}
            .init(name: "{{{serverName}}}", in: .{{{in}}}, value: {{{name}}}, format: {{#if format}}"{{format}}"{{else}}nil{{/if}}) {{~#unless @last}},{{/unless}}
        {{/each}}
        ], completion: completion)
    }

{{/each}}
}

public let {{{apiClassName}}} = {{{apiClassName}}}Class()


{{#each objectModels}}
{{~#maybeComment description}}
{{{description}}}
{{/maybeComment}}
open class {{{name}}}: {{#if superclass}}{{{superclass}}}{{else}}SwaggerModel{{/if}} {
    {{#each properties}}
    {{~#maybeComment description}}
    {{{description}}}
    {{/maybeComment}}
    public var {{{name}}}: {{{type}}}{{#unless isRequired}}?{{/unless}}
    {{/each}}

    public init(
    {{#each initializerProperties}}
        {{{name}}}: {{{type}}} {{~#unless isRequired}}?=nil{{/unless}} {{~#unless @last}},{{/unless}}
    {{/each}}
    ) {
    {{#each properties}}
        self.{{{name}}} = {{{name}}}
    {{/each}}
    {{~#if superclass}}
        super.init(
        {{#each inheritedProperties}}
            {{{name}}}: {{{name}}} {{~#unless @last}},{{/unless}}
        {{/each}}
        )
    {{/if}}
    }

    {{#if superclass}}override {{/if}}public func serialize(format: String? = nil) -> Any? {
        let retVal: [String: Any?] = [
        {{#each properties}}
            "{{{specName}}}": {{{name}}}{{#unless isRequired}}?{{/unless}}.serialize(format: {{#if format}}"{{format}}"{{else}}nil{{/if}}),
        {{/each}}
        ]
        return retVal.filter { (_: String, val: Any?) -> Bool in return val != nil }
    }

    {{#if superclass}}override {{/if}}public class func deserialize(json: Any?, format: String? = nil) throws -> Self {
        guard let dictionary = json as? [String: Any] else {
            throw deserializationError("Trying to deserialize a {{{name}}} but got \(String(describing: json))")
        }
        {{#if discriminator}}
        if let discriminator = dictionary["{{{discriminator}}}"] as? String {
            switch discriminator {
            {{#each subclasses}}
            case "{{{specName}}}":
                return try cast(try {{{name}}}.deserialize(json: json, format: format))
            {{/each}}
            default:
                break
            }
        }
        {{/if}}
        return self.init(
        {{#each initializerProperties}}
            {{{name}}}: try {{#unless isRequired}}Optional<{{/unless}}{{{type}}}{{#unless isRequired}}>{{/unless}}.deserialize(json: dictionary["{{{specName}}}"], format: {{#if format}}"{{format}}"{{else}}nil{{/if}}){{#unless @last}},{{/unless}}
        {{/each}}
        )
    }
}

{{/each}}

{{#each enumModels}}
public enum {{{name}}}: {{{enumType}}}, SwaggerEnum {
    {{#each values}}
    case {{{name}}} = {{{value}}}
    {{/each}}
    case _unknown = "_unknown"
    public func serialize(format: String? = nil) -> Any? {
        if SwaggerApi.debugMode && self == ._unknown {
            fatalError("Attempting to serialize {{{name}}}._unknown! (This error will not happen in release mode.)")
        }
        return rawValue;
    }
    public func serializeToString(format: String? = nil) -> String? {
        return rawValue.serializeToString(format: format);
    }
    public static func deserialize(json: Any?, format: String? = nil) throws -> {{{name}}} {
        guard let asType = json as? {{{enumType}}},
            let asEnum = {{{name}}}(rawValue: asType) else {
            if SwaggerApi.debugMode {
                fatalError("Attempting to deserialize {{{name}}}._unknown! (This error will not happen in release mode.)")
            }
            return ._unknown;
        }
        return asEnum
    }
}

{{/each}}
