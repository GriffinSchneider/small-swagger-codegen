import Foundation

public protocol SwaggerSerializeable {
  func shallowSerialize() -> Any
}

extension String: SwaggerSerializeable {
  func shallowSerialize() -> Any {
    return self
  }
}

public class SwaggerSerializeableArray<T: SwaggerSerializeable> {
  let values: [T]
  init(values: [T]) {
    self.values = values
  }
}
extension SwaggerSerializeableArray: SwaggerSerializeable {
  public func shallowSerialize() -> Any {
    return "BUTTS"
  }
}

public protocol SwaggerSerializeableObject: SwaggerSerializeable {
  func shallowSerializeObject() -> [String: SwaggerSerializeable]
}
extension SwaggerSerializeableObject {
  public func shallowSerialize() -> Any {
    return shallowSerializeObject()
  }
}

public protocol SwaggerSerializeableEnum: SwaggerSerializeable {
  associatedtype SwaggerSerializeableEnumType
  func shallowSerializeEnum() -> SwaggerSerializeableEnumType
}
extension SwaggerSerializeableEnum {
  public func shallowSerialize() -> Any {
    return shallowSerializeEnum()
  }
}
extension SwaggerSerializeable {
  func serialize() -> Any {
    let shallow = shallowSerialize()
    if let obj = shallow as? [String: Any] {
      return obj.mapValues { v in
        if let x = v as? SwaggerSerializeable {
        }
        $0.serialize
      }
    } else if let arr = shallow as? [Any] {
    }
  }
}

open class Api {
{{#each methods}}
    open static func {{name}}(
    {{#each params}}
    {{name}}: {{type}},
    {{/each}}
    completion: (Error?, {{response.type}}) -> Void
    ) {
        // {{method}} {{path}}
    }
{{/each}}
}

{{#each objectModels}}
  open class {{name}}: SwaggerSerializeableObject {
  {{#with schema}}
    {{#each properties}}
      public var {{@key}}: {{type}}
    {{/each}}

    public init(
    {{#each properties}}
      {{@key}}: {{type}}{{#unless @last}},{{/unless}}
    {{/each}}
    ) {
    {{#each properties}}
      self.{{@key}} = {{@key}}
    {{/each}}
    }

    public func shallowSerializeObject() -> [String: SwaggerSerializeable] {
      return [
      {{#each properties}}
        "{{specName}}": {{@key}},
      {{/each}}
      ]
    }
  {{/with}}
  }

{{/each}}

{{#each enumModels}}
  public enum {{name}}: {{schema.enumType}}, SwaggerSerializeableEnum {
  {{#with schema}}
    {{#each values}}
      case {{name}} = {{{value}}}
    {{/each}}
    typealias SwaggerSerializeableEnumType = {{schema.enumType}}
    public func shallowSerializeEnum() -> {{schema.enumType}} {
      return rawValue;
    }
  {{/with}}
  }
{{/each}}
