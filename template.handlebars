import Foundation

open class Api { 
{{#each methods}}
  open static func {{{name}}}(
  {{#each params}}
    {{{name}}}: {{{type}}}{{#unless required}}? = nil{{/unless}},
  {{/each}}
    completion: (Error?, {{{response.type}}}) -> Void
  ) {
    _request(params: [
    {{#each params}}
      .init(name: "{{{serverName}}}", in: .{{{in}}}, value: {{{name}}}, format: {{#if format}}"{{format}}"{{else}}nil{{/if}}) {{~#unless @last}},{{/unless}}
    {{/each}}
    ]) { (err: Error?, res: {{{response.type}}}) in
      // {{{method}}} {{{path}}}
    }
  }
{{/each}}
}

{{#each objectModels}}
  open class {{{name}}}: SwaggerObject {
  {{#with schema}}
    {{#each properties}}
      public var {{{@key}}}: {{{type}}}{{#unless isRequired}}?{{/unless}}
    {{/each}}

    required public init(
    {{#each properties}}
      {{{@key}}}: {{{type}}} {{~#unless isRequired}}?=nil{{/unless}} {{~#unless @last}},{{/unless}}
    {{/each}}
    ) {
    {{#each properties}}
      self.{{{@key}}} = {{{@key}}}
    {{/each}}
    }

    public func serialize(format: String? = nil) -> Any? {
      return [
      {{#each properties}}
        "{{{specName}}}": {{{@key}}}{{#unless isRequired}}?{{/unless}}.serialize(format: {{#if format}}"{{format}}"{{else}}nil{{/if}}) as Any,
      {{/each}}
      ]
    }

    public static func deserialize(json: Any, format: String? = nil) -> Self {
      guard let dictionary = json as? [String: Any] else {
        fatalError("Deserialization error: expected {{{../name}}} but got \(json)")
      }
      return self.init(
      {{#each properties}}
        {{{@key}}}: {{#unless isRequired}}Optional<{{/unless}}{{{type}}}{{#unless isRequired}}>{{/unless}}.deserialize(json: dictionary["{{{specName}}}"] as Any, format: {{#if format}}"{{format}}"{{else}}nil{{/if}}){{#unless @last}},{{/unless}}
      {{/each}}
      )
    }
  {{/with}}
  }

{{/each}}

{{#each enumModels}}
  public enum {{{name}}}: {{{schema.enumType}}}, SwaggerObject {
  {{#with schema}}
    {{#each values}}
      case {{{name}}} = {{{value}}}
    {{/each}}
    public func serialize(format: String? = nil) -> Any? {
      return rawValue;
    }
    public static func deserialize(json: Any, format: String? = nil) -> {{{../name}}} {
      guard let asType = json as? {{{enumType}}},
        let asEnum = {{{../name}}}(rawValue: asType) else {
        fatalError("Deserialization error: expected {{{enumType}}} but got \(json)")
      }
      return asEnum
    }
  {{/with}}
  }
{{/each}}
